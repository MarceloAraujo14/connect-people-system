server:
  port: 80

security:
  admin: ${ADMIN_PASS}
spring:
  security:
    oauth2:
      client:
        registration:
#          linkedin:
#            clientId: ${LINKEDIN_CID}
#            clientSecret: ${LINKEDIN_CS}
#            clientAuthenticationMethod: post
#            authorizationGrantType: authorization_code
#            redirectUri: '{baseUrl}/login/oauth2/code/{registrationId}'
#            scope: r_liteprofile, r_emailaddress
#            clientName: Linkedin


          google:
            clientId: ${GOOGLE_CID}
            clientSecret: ${GOOGLE_CS}

        provider:
          linkedin:
            tokenUri: https://www.linkedin.com/oauth/v2/accessToken
            authorizationUri: https://www.linkedin.com/oauth/v2/authorization
            userInfoUri: https://api.linkedin.com/v2/me
            userNameAttribute: id


  #Database Conf
  datasource:
    url: jdbc:postgresql://localhost:15432/connectpeople?currentSchema=public
    username: "admin"
    password: "admin"
    driver-class-name: "org.postgresql.Driver"

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  flyway:
    locations: "db/migration"
    baseline-on-migrate: false

  devtools:
    livereload:
      enabled: true

springdoc:
  swagger-ui:
    path: "/resume/swagger-ui.html"

#logging:
#  level:
#    org.springframework.security: TRACE